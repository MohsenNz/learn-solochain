[package]
name                    = "solochain-template-node"
description             = "An EVM/Ethereum compatible solochain node"
version                 = "0.1.0"
license                 = "Unlicense"
authors.workspace       = true
homepage.workspace      = true
repository.workspace    = true
edition.workspace       = true
publish                 = false

build                   = "build.rs"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
clap                            = { workspace = true, features = ["derive"] }
futures                         = { workspace = true, features = ["thread-pool"] }
serde_json                      = { workspace = true, default-features = true }
jsonrpsee                       = { workspace = true, features = ["server"] }
solochain-template-runtime      = { workspace = true, default-features = true }
log                             = { workspace = true }
async-trait                     = { workspace = true }
codec                           = { workspace = true }
hex-literal                     = { workspace = true }
# Substrate
prometheus-endpoint             = { workspace = true, package = "substrate-prometheus-endpoint" }
# SC
sc-basic-authorship             = { workspace = true }
sc-cli                          = { workspace = true }
sc-client-api                   = { workspace = true }
sc-consensus                    = { workspace = true }
sc-consensus-aura               = { workspace = true }
sc-consensus-grandpa            = { workspace = true }
sc-consensus-manual-seal        = { workspace = true }
sc-executor                     = { workspace = true }
sc-network                      = { workspace = true }
sc-network-sync                 = { workspace = true }
sc-offchain                     = { workspace = true }
sc-rpc                          = { workspace = true }
sc-rpc-api                      = { workspace = true }
sc-service                      = { workspace = true }
sc-telemetry                    = { workspace = true }
sc-transaction-pool             = { workspace = true }
sc-transaction-pool-api         = { workspace = true }
# SP
sp-api                          = { workspace = true, features = ["default"] }
sp-block-builder                = { workspace = true }
sp-blockchain                   = { workspace = true }
sp-consensus-aura               = { workspace = true, features = ["default"] }
sp-consensus-grandpa            = { workspace = true, features = ["default"] }
sp-core                         = { workspace = true, features = ["default"] }
sp-inherents                    = { workspace = true, features = ["default"] }
sp-io                           = { workspace = true, features = ["default"] }
sp-offchain                     = { workspace = true, features = ["default"] }
sp-runtime                      = { workspace = true, features = ["default"] }
sp-session                      = { workspace = true, features = ["default"] }
sp-timestamp                    = { workspace = true, features = ["default"] }
sp-transaction-pool             = { workspace = true, features = ["default"] }
sp-keyring                      = { workspace = true, default-features = true }
# These dependencies are used for RPC
frame-system-rpc-runtime-api    = { workspace = true }
pallet-transaction-payment-rpc  = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
substrate-frame-rpc-system      = { workspace = true }
# These dependencies are used for runtime benchmarking
frame-benchmarking              = { workspace = true, optional = true }
frame-benchmarking-cli          = { workspace = true }
frame-system                    = { workspace = true }
pallet-transaction-payment      = { workspace = true }
# FC
fc-api                          = { workspace = true }
fc-cli                          = { workspace = true }
fc-consensus                    = { workspace = true }
fc-db                           = { workspace = true }
fc-mapping-sync                 = { workspace = true }
fc-rpc                          = { workspace = true }
fc-rpc-core                     = { workspace = true }
fc-storage                      = { workspace = true }
# FP
fp-account                      = { workspace = true }
fp-dynamic-fee                  = { workspace = true, features = ["default"] }
fp-evm                          = { workspace = true, features = ["default"] }
fp-rpc                          = { workspace = true, features = ["default"] }

[build-dependencies]
substrate-build-script-utils    = { workspace = true, default-features = true }

[features]
default = [
    "std",
    "rocksdb",
    "sql",
    "txpool",
    "rpc-binary-search-estimate",
]
std = [
    "solochain-template-runtime/std",
]
rocksdb = [
    "sc-cli/rocksdb",
    "sc-service/rocksdb",
    "fc-cli/rocksdb",
    "fc-db/rocksdb",
    "fc-mapping-sync/rocksdb",
    "fc-rpc/rocksdb",
]
sql = [
    "fc-db/sql",
    "fc-mapping-sync/sql",
]
txpool = [
    "fc-rpc/txpool"
]
rpc-binary-search-estimate = [
    "fc-rpc/rpc-binary-search-estimate"
]
# Dependencies that are only required if runtime benchmarking should be build.
runtime-benchmarks = [
    "frame-benchmarking-cli/runtime-benchmarks",
    "frame-system/runtime-benchmarks",
    "sc-service/runtime-benchmarks",
    "solochain-template-runtime/runtime-benchmarks",
    "sp-runtime/runtime-benchmarks",
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.
try-runtime = [
    "frame-system/try-runtime",
    "pallet-transaction-payment/try-runtime",
    "solochain-template-runtime/try-runtime",
    "sp-runtime/try-runtime",
]
